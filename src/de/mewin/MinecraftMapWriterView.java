/*
 * MinecraftMapWriterView.java
 */

package de.mewin;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Image;
import java.awt.Point;
import java.awt.event.MouseEvent;
import java.util.EventObject;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.jdesktop.application.Action;
import org.jdesktop.application.FrameView;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import javax.imageio.ImageIO;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;
import org.jdesktop.application.Application.ExitListener;

/**
 * The application's main frame.
 */
public class MinecraftMapWriterView extends FrameView {
    private MinecraftMapWriterApp app;
    private Image img = null;
    private boolean drawing = false;
    private byte currentColor = 0x00;
    private boolean unsaved = false;
    private final ImageFileFilter filter;

    public MinecraftMapWriterView(MinecraftMapWriterApp app) {
        super(app);

        this.app = app;

        initComponents();

        this.getFrame().setResizable(false);

        filter = new ImageFileFilter();

        // status bar initialization - message timeout, idle icon and busy animation, etc

        (new Thread()
        {
            public void run()
            {
                while(true)
                {
                    if(img != null)
                    {
                        canvasPic.getGraphics().drawImage(img, 0, 0, null);
                    }
                    try {
                        sleep(100);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(MinecraftMapWriterView.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        }).start();

        initColorMenu();


        this.getApplication().addExitListener(new ExitListener() {

            public boolean canExit(EventObject event) {
                return !unsaved || JOptionPane.showConfirmDialog(mainPanel, "You current map is unsaved, continue?", "File is unsaved", JOptionPane.OK_CANCEL_OPTION) == JOptionPane.OK_OPTION;
            }


            public void willExit(EventObject event) {

            }
        });
    }

    private void initColorMenu()
    {
        for(int i = 0; i < 13; i++)
        {
            for(int j = 0; j < 3; j++)
            {
                if(i == 0 && j == 1) break;
                JMenuItem m = new JMenuItem();
                final byte data = MapColor.dataFromIndexAndBrightness(i, j);
                final Color color = MapColor.colorFromIndexAndBrightness(i, j);
                final String name = MapColor.colorNameFromIndexAndBrightness(i, j);
                m.setText(name);
                m.setBackground(color);
                m.addActionListener(new ActionListener() {

                    public void actionPerformed(ActionEvent e) {
                        currentColor = data;
                        jButtonColor.setText(name);
                        jButtonColor.setBackground(color);
                    }
                });

                this.jPopupMenu1.add(m);
            }
        }
    }

    @Action
    public void showAboutBox() {
        if (aboutBox == null) {
            JFrame mainFrame = MinecraftMapWriterApp.getApplication().getMainFrame();
            aboutBox = new MinecraftMapWriterAboutBox(mainFrame);
            aboutBox.setLocationRelativeTo(mainFrame);
        }
        MinecraftMapWriterApp.getApplication().show(aboutBox);
    }

    public void setImage(Image img)
    {
        this.img = img;
    }

    public void openFile(File f)
    {
        this.app.loadFile(f);
        this.app.showPicture();
    }

    public void saveFile(File f) {
        this.app.writeFile(f);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButtonColor = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        canvasPic = new java.awt.Canvas();
        menuBar = new javax.swing.JMenuBar();
        javax.swing.JMenu fileMenu = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        javax.swing.JMenuItem exitMenuItem = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        javax.swing.JMenu helpMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem aboutMenuItem = new javax.swing.JMenuItem();
        jPopupMenu1 = new javax.swing.JPopupMenu();
        jFileChooser1 = new javax.swing.JFileChooser();

        mainPanel.setMaximumSize(null);
        mainPanel.setMinimumSize(null);
        mainPanel.setName("mainPanel"); // NOI18N
        mainPanel.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                mainPanelComponentResized(evt);
            }
            public void componentShown(java.awt.event.ComponentEvent evt) {
                mainPanelComponentShown(evt);
            }
        });

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(de.mewin.MinecraftMapWriterApp.class).getContext().getResourceMap(MinecraftMapWriterView.class);
        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        jButtonColor.setBackground(MapColor.colorFromIndexAndBrightness(0, 0));
        jButtonColor.setText(MapColor.colorNameFromIndexAndBrightness(0, 0));
        jButtonColor.setName("jButtonColor"); // NOI18N
        jButtonColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonColorActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder(resourceMap.getColor("jPanel1.border.highlightColor"), resourceMap.getColor("jPanel1.border.shadowColor"))); // NOI18N
        jPanel1.setName("jPanel1"); // NOI18N

        canvasPic.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        canvasPic.setName("canvasPic"); // NOI18N
        canvasPic.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                canvasPicMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                canvasPicMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                canvasPicMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(canvasPic, javax.swing.GroupLayout.PREFERRED_SIZE, 512, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(canvasPic, javax.swing.GroupLayout.PREFERRED_SIZE, 512, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1)
                    .addComponent(jButtonColor))
                .addGap(23, 23, 23))
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonColor))
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        menuBar.setName("menuBar"); // NOI18N

        fileMenu.setText(resourceMap.getString("fileMenu.text")); // NOI18N
        fileMenu.setName("fileMenu"); // NOI18N

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem2.setText(resourceMap.getString("jMenuItem2.text")); // NOI18N
        jMenuItem2.setName("jMenuItem2"); // NOI18N
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        fileMenu.add(jMenuItem2);

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setText(resourceMap.getString("jMenuItem1.text")); // NOI18N
        jMenuItem1.setName("jMenuItem1"); // NOI18N
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        fileMenu.add(jMenuItem1);

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem3.setText(resourceMap.getString("jMenuItem3.text")); // NOI18N
        jMenuItem3.setName("jMenuItem3"); // NOI18N
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        fileMenu.add(jMenuItem3);

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem4.setText(resourceMap.getString("jMenuItem4.text")); // NOI18N
        jMenuItem4.setName("jMenuItem4"); // NOI18N
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        fileMenu.add(jMenuItem4);

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(de.mewin.MinecraftMapWriterApp.class).getContext().getActionMap(MinecraftMapWriterView.class, this);
        exitMenuItem.setAction(actionMap.get("quit")); // NOI18N
        exitMenuItem.setName("exitMenuItem"); // NOI18N
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        jMenu1.setText(resourceMap.getString("jMenu1.text")); // NOI18N
        jMenu1.setName("jMenu1"); // NOI18N

        jMenuItem5.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem5.setText(resourceMap.getString("jMenuItem5.text")); // NOI18N
        jMenuItem5.setName("jMenuItem5"); // NOI18N
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem5);

        jMenuItem6.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Y, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem6.setText(resourceMap.getString("jMenuItem6.text")); // NOI18N
        jMenuItem6.setName("jMenuItem6"); // NOI18N
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem6);

        menuBar.add(jMenu1);

        helpMenu.setName("helpMenu"); // NOI18N

        aboutMenuItem.setAction(actionMap.get("showAboutBox")); // NOI18N
        aboutMenuItem.setName("aboutMenuItem"); // NOI18N
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        jPopupMenu1.setName("jPopupMenuColors"); // NOI18N

        jFileChooser1.setName("jFileChooser1"); // NOI18N

        setComponent(mainPanel);
        setMenuBar(menuBar);
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        this.jFileChooser1.setDialogTitle("Load map data...");

        if(!unsaved || JOptionPane.showConfirmDialog(mainPanel, "You current map is unsaved, continue?", "File is unsaved", JOptionPane.OK_CANCEL_OPTION) == JOptionPane.OK_OPTION)
        {
            if(this.jFileChooser1.showOpenDialog(this.mainPanel) == JFileChooser.APPROVE_OPTION)
            {
                openFile(this.jFileChooser1.getSelectedFile());
                unsaved = false;
            }
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void mainPanelComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_mainPanelComponentResized
        
    }//GEN-LAST:event_mainPanelComponentResized

    private void canvasPicMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_canvasPicMousePressed
        final MouseEvent e = evt;

        if(e.getButton() == MouseEvent.BUTTON2)
        {
            Point pos = canvasPic.getMousePosition();
            Dimension size = canvasPic.getSize();

            int x = (int) (pos.getX() / size.getWidth() * 128);
            int y = (int) (pos.getY() / size.getHeight() * 128);

            byte color = app.getColor(x, y);

            this.jButtonColor.setBackground(MapColor.colorFromData(color));
            this.jButtonColor.setText(MapColor.colorNameFromData(color));
            this.currentColor = color;

            return;
        }
        
        drawing = true;
        unsaved = true;

        (new Thread()
        {
            public void run()
            {
                while(drawing)
                {
                    Point pos = canvasPic.getMousePosition();
                    Dimension size = canvasPic.getSize();

                    if(pos == null)
                    {
                        app.setHistoryPoint();
                        drawing = false;
                    }
                    else
                    {
                        int x = (int) (pos.getX() / size.getWidth() * 128);
                        int y = (int) (pos.getY() / size.getHeight() * 128);

                        if(e.getButton() == MouseEvent.BUTTON1)
                            app.setColor(x, y, currentColor);
                        else if(e.getButton() == MouseEvent.BUTTON3)
                            app.setColor(x, y, (byte) 0x00);
                    }
                }
            }
        }).start();
    }//GEN-LAST:event_canvasPicMousePressed

    private void canvasPicMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_canvasPicMouseReleased
        if(drawing)
            app.setHistoryPoint();
        drawing = false;
    }//GEN-LAST:event_canvasPicMouseReleased

    private void canvasPicMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_canvasPicMouseExited
        if(drawing)
            app.setHistoryPoint();
        drawing = false;
    }//GEN-LAST:event_canvasPicMouseExited

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        if(!unsaved || JOptionPane.showConfirmDialog(mainPanel, "You current map is unsaved, continue?", "File is unsaved", JOptionPane.OK_CANCEL_OPTION) == JOptionPane.OK_OPTION)
        {
            app.newPicture();
            unsaved = false;
        }
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        this.jFileChooser1.setDialogTitle("Save map data...");

        if(this.jFileChooser1.showSaveDialog(this.mainPanel) == JFileChooser.APPROVE_OPTION)
        {
            File f = this.jFileChooser1.getSelectedFile();
            if(!f.exists() || JOptionPane.showConfirmDialog(mainPanel, "Do you really want to override \n\"" + f.getName() + "\"", "Override", JOptionPane.OK_CANCEL_OPTION) == JOptionPane.OK_OPTION)
            {
                saveFile(f);
                unsaved = false;
            }
            
        }
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jButtonColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonColorActionPerformed
        this.jPopupMenu1.pack();
        this.jPopupMenu1.setInvoker(this.jButtonColor);
        this.jPopupMenu1.setLocation(this.jButtonColor.getLocationOnScreen());
        this.jPopupMenu1.setVisible(true);
    }//GEN-LAST:event_jButtonColorActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        this.jFileChooser1.setDialogTitle("Import picture...");

        if(!unsaved || JOptionPane.showConfirmDialog(mainPanel, "You current map is unsaved, continue?", "File is unsaved", JOptionPane.OK_CANCEL_OPTION) == JOptionPane.OK_OPTION)
        {

            this.jFileChooser1.addChoosableFileFilter(filter);
            this.jFileChooser1.setAcceptAllFileFilterUsed(false);
            this.jFileChooser1.setFileFilter(filter);
             
            if(this.jFileChooser1.showOpenDialog(this.mainPanel) == JFileChooser.APPROVE_OPTION)
            {
                app.loadImage(this.jFileChooser1.getSelectedFile());
                unsaved = false;
            }

            this.jFileChooser1.setAcceptAllFileFilterUsed(true);
            this.jFileChooser1.removeChoosableFileFilter(filter);
        }

    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void mainPanelComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_mainPanelComponentShown
        app.showPicture();
    }//GEN-LAST:event_mainPanelComponentShown

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        app.goHistory(-1);
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        app.goHistory(1);
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public java.awt.Canvas canvasPic;
    private javax.swing.JButton jButtonColor;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuBar menuBar;
    // End of variables declaration//GEN-END:variables

   

    private JDialog aboutBox;



    private class ImageFileFilter extends FileFilter
    {

        @Override
        public boolean accept(File f) {
            String[] suffixes = ImageIO.getReaderFileSuffixes();
            String name = f.getName();
            String suffix = name.substring(name.indexOf(".") + 1);

            if(f.isDirectory()) return true;

            for(int i = 0; i <  suffixes.length; i++)
            {
                if(suffixes[i].equalsIgnoreCase(suffix))
                {
                    return true;
                }
            }

            return false;
        }

        @Override
        public String getDescription() {
            return "Images (JPEG/PNG/GIF)";
        }

    }

}
